{"version":3,"sources":["Client.js","dispatchers/ModalDispatcher.js","components/CommandsMenu.jsx","components/InfoModal.jsx","components/App.jsx","index.js"],"names":["src_Client","Client","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","socket","pin","_this2","isConnected","url","getSocketURL","WebSocket","addEventListener","emit","onData","bind","evt","_this3","data","split","forEach","msg","type","json","JSON","parse","err","processResponse","text","from","userPins","send","stringify","close","host","window","location","origin","includes","readyState","EventEmitter","dispatchers_ModalDispatcher","header","body","footer","CommandsMenu","_React$Component","props","state","isOpen","pending","inherits","createClass","key","value","on","_evt$userPins","ModalDispatcher","modal","concat","length","join","setState","lockUI","getAllUsers","lock","arguments","undefined","react_default","a","createElement","ButtonDropdown","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","onClick","findAllUsers","React","Component","InfoModal","_evt$header","_evt$body","_evt$footer","Modal","ModalHeader","ModalBody","ModalFooter","App","outputRef","createRef","inputRef","updateChat","connect","elem","current","chat","scrollTop","scrollHeight","keyCode","sendChat","className","Container","ref","readOnly","onKeyUp","onInput","CommandsMenu_CommandsMenu","InfoModal_InfoModal","ReactDOM","render","App_App","document","querySelector"],"mappings":"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","file":"static/js/main.49a4560e.chunk.js","sourcesContent":["// imports\r\nimport { EventEmitter } from \"events\";\r\n\r\nconst DELIM = \"*!*\";    // json message delimiter\r\n\r\n// client class holds the websocket connection and handles sending/receiving data\r\nclass Client extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.socket = null;     // websocket \r\n        this.pin = null;        // server-generated unique pin\r\n    }\r\n\r\n    // connects to the server\r\n    connect(){\r\n        // only connect if not connected\r\n        if(!this.isConnected){\r\n            // get connection url\r\n            let url = this.getSocketURL();\r\n\r\n            // create the websocket (auto-connects)\r\n            this.socket = new WebSocket(url);\r\n\r\n            // when the websocket connects...\r\n            this.socket.addEventListener(\"open\", () => {\r\n                this.emit(\"connected\");\r\n            });\r\n\r\n            // when the websocket receives server data...\r\n            this.socket.addEventListener(\"message\", this.onData.bind(this));\r\n\r\n            // when the websocket has a fatal error...\r\n            this.socket.addEventListener(\"error\", () => {\r\n                this.emit(\"error\");\r\n            });\r\n\r\n            // when the websocket closes...\r\n            this.socket.addEventListener(\"close\", () => {\r\n                this.emit(\"close\");\r\n            });\r\n        }\r\n    }\r\n\r\n    // parses data from the server\r\n    onData(evt){\r\n        // data can be sent concatenated - split on delimiter \r\n        evt.data.split(DELIM).forEach(msg => {\r\n            // extract type and data\r\n            let type, data;\r\n            try{\r\n                // attempt parse json\r\n                let json = JSON.parse(msg);\r\n\r\n                // got json - extract type and data\r\n                type = json.type || null;\r\n                data = json.data || null;\r\n            }\r\n            catch(err){\r\n                // json parse error\r\n                return;\r\n            }\r\n\r\n            // process response using type and data\r\n            this.processResponse(type, data);\r\n        });\r\n    }\r\n\r\n    // processes a server response\r\n    processResponse(type, data){\r\n        switch(type){\r\n            case \"chat\":\r\n                let {text, from} = data;\r\n                this.emit(\"chat\", {text, from});\r\n                break;\r\n            case \"pin\":\r\n                let {pin} = data;\r\n                this.pin = pin;\r\n                this.emit(\"pin\");\r\n                break;\r\n            case \"all-users\":\r\n                let {userPins} = data;\r\n                this.emit(\"all-users\", {userPins});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // sends chat request\r\n    sendChat(text){\r\n        this.send(\"chat\", {text});\r\n    }\r\n\r\n    // requests all online users\r\n    getAllUsers(){\r\n        this.send(\"all-users\");\r\n    }\r\n\r\n    // sends a formatted string to the server\r\n    send(type, data){\r\n        if(this.isConnected){\r\n            this.socket.send(JSON.stringify({type, data}) + DELIM)\r\n        }\r\n    }\r\n\r\n    // closes the websocket if it can\r\n    close(){\r\n        if(this.isConnected){\r\n            this.socket.close();\r\n        }\r\n    }\r\n\r\n    // gets websocket connection url\r\n    getSocketURL(){\r\n        let host = window.location.origin.includes(\"https:\") ? \"wss:\" : \"ws:\";\r\n\r\n        switch(window.location.origin){\r\n            case \"file://\":\r\n                host += \"//electronchat.herokuapp.com/\";\r\n                break;\r\n            case \"localhost\":\r\n                host += \"localhost:8080\";\r\n                break;\r\n            default:\r\n                // duplicate of localhost case incase it changes \r\n                host += \"localhost:8080\";\r\n                break;\r\n        }\r\n\r\n        return host;\r\n    }\r\n\r\n    // getter for is connected\r\n    get isConnected(){\r\n        return this.socket ? this.socket.readyState === 1 : false;\r\n    }\r\n}\r\n\r\n// export singleton\r\nexport default new Client();","import { EventEmitter } from \"events\";\r\n\r\n// triggers modals \r\nclass ModalDispatcher extends EventEmitter{\r\n    // trigger info modal\r\n    modal(header, body, footer){\r\n        this.emit(\"modal\", {header, body, footer});\r\n    }\r\n}\r\n\r\n// export singleton\r\nexport default new ModalDispatcher();","import React from \"react\";\r\nimport { DropdownItem, DropdownMenu, DropdownToggle, ButtonDropdown } from \"reactstrap\";\r\nimport Client from \"../Client\";\r\nimport ModalDispatcher from \"../dispatchers/ModalDispatcher\";\r\n\r\nexport class CommandsMenu extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen:     false,  // visible?\r\n            pending:    true    // loading request?\r\n        };\r\n    }\r\n\r\n    // when the menu mounts...\r\n    componentDidMount(){\r\n        // listen for all users response\r\n        Client.on(\"all-users\", evt => {\r\n            // show modal\r\n            let {userPins=[]} = evt;\r\n            ModalDispatcher.modal(`Online Users (${userPins.length})`, userPins.join(\", \"));\r\n        });\r\n    }\r\n\r\n    // toggles the visibility\r\n    toggle(){\r\n        this.setState({isOpen: !this.state.isOpen});\r\n    }\r\n\r\n    // sends the request for all online users\r\n    findAllUsers(){\r\n        this.lockUI();\r\n        Client.getAllUsers();\r\n    }\r\n\r\n    // locks/unlocks UI buttons\r\n    lockUI(lock=true){\r\n        this.setState({pending: lock});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <ButtonDropdown isOpen={this.state.isOpen} toggle={this.toggle.bind(this)}>\r\n            <DropdownToggle caret>\r\n                Commands\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                <DropdownItem header>Requests</DropdownItem>\r\n                <DropdownItem divider/>\r\n                <DropdownItem onClick={this.findAllUsers.bind(this)}>Find All Users</DropdownItem>\r\n            </DropdownMenu>\r\n            </ButtonDropdown>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport ModalDispatcher from \"../dispatchers/ModalDispatcher\";\r\n\r\nexport class InfoModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false,  // visible?\r\n            header: null,   // header text\r\n            body:   null,   // body text\r\n            footer: null    // footer text\r\n        };\r\n    }\r\n\r\n    // when the modal mounts...\r\n    componentDidMount(){\r\n        // listen for modal events and update \r\n        ModalDispatcher.on(\"modal\", evt => {\r\n            let {header=null, body=null, footer=null} = evt;\r\n            this.setState({header, body, footer, isOpen: true});\r\n        });\r\n    }\r\n\r\n    // toggles the visibility of the modal\r\n    toggle(){\r\n        this.setState({isOpen: !this.state.isOpen});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Modal isOpen={this.state.isOpen} toggle={this.toggle.bind(this)}>\r\n                <ModalHeader toggle={this.toggle.bind(this)}>\r\n                    {this.state.header}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    {this.state.body}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {this.state.footer}\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { CommandsMenu } from \"./CommandsMenu\";\r\nimport { InfoModal } from \"./InfoModal\";\r\nimport Client from \"../Client\";\r\nimport \"./App.css\";\r\n\r\nexport class App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // refs \r\n        this.outputRef = React.createRef();\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    // when the component mounts...\r\n    componentDidMount(){\r\n        // client handlers\r\n        // (these should be removed on unmount... but app won't unmount)\r\n        Client.on(\"connected\", () => this.updateChat(\"Connected to server.\"));\r\n        Client.on(\"close\", () => this.updateChat(\"Lost connection.\"));\r\n        Client.on(\"pin\", () => this.updateChat(`PIN = ${Client.pin}`));\r\n        Client.on(\"chat\", evt => this.updateChat(evt.text, evt.from));\r\n\r\n        // immediately connect to the server\r\n        this.updateChat(\"Connecting...\");\r\n        Client.connect();\r\n    }\r\n\r\n    // updates the chat output element \r\n    updateChat(text, from){\r\n        // the actual <textarea>\r\n        let elem = this.outputRef.current;\r\n        // format chat string \r\n        let chat = from ? `${from}: ${text}` : text;\r\n\r\n        // update the element\r\n        if(!elem.value){\r\n            // empty - just paste text\r\n            elem.value = chat;\r\n        }\r\n        else{\r\n            // not empty - append text to bottom\r\n            elem.value = `${elem.value}\\n${chat}`;\r\n            \r\n            // scroll to bottom\r\n            elem.scrollTop = elem.scrollHeight;\r\n        }\r\n    }\r\n\r\n    // handle keyboard input\r\n    onInput(evt){\r\n        // get text in the <input>\r\n        let text = this.inputRef.current.value;\r\n\r\n        // if there is text and the key pressed is enter...\r\n        if(text && evt.keyCode === 13){\r\n            // send the chat request\r\n            Client.sendChat(text);\r\n\r\n            // clear the <input>\r\n            this.inputRef.current.value = \"\";\r\n        }\r\n    }\r\n\r\n    // renders the app\r\n    render(){\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <header>\r\n                    <h1 className=\"text-center\">Electron Chat</h1>\r\n                </header>\r\n                <br/>\r\n                <Container>\r\n                    <div className=\"chat\">\r\n                        <textarea ref={this.outputRef} readOnly/>\r\n                        <br/>\r\n                        <input\r\n                            ref={this.inputRef}\r\n                            type=\"text\"\r\n                            onKeyUp={this.onInput.bind(this)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <CommandsMenu/>\r\n                    </div>\r\n                </Container>\r\n                <InfoModal/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}